import math
import struct
import wave
import pyaudio
import scipy.fftpack
import numpy as np
import reedsolo

# INTMAX = 2**(32-1)-1
channels = 1
UNIT = 0.1
SAMPLERATE = 48000
padding = 10
SHORTMAX = 2**(16-1)-1
PADDING_BYTE = b'\x00'  # Padding for block alignment


DATA_LEN = 12  # Îç∞Ïù¥ÌÑ∞ Î∏îÎ°ù Í∏∏Ïù¥
RSC_LEN = 4  # Reed-Solomon Ïò§Î•ò Ï†ïÏ†ï Í∏∏Ïù¥
BLOCK_SIZE = DATA_LEN + RSC_LEN  # 16Î∞îÏù¥Ìä∏ (32 HEX)
UNIT = 0.1  # 1Ïú†Îãõ(0.1Ï¥à)
SAMPLERATE = 48000
chunk_size = 2 # 32ÎπÑÌä∏ÌòïÏãù(4Î∞îÏù¥Ìä∏ * 2)


rules = {
    'START': 512, '0': 768, '1': 896, '2': 1024, '3': 1152, '4': 1280, '5': 1408, 
    '6': 1536, '7': 1664, '8': 1792, '9': 1920, 'A': 2048, 'B': 2176, 'C': 2304, 
    'D': 2432, 'E': 2560, 'F': 2688, 'END': 2944
}
hex_to_MFSK = {value: key for key, value in rules.items()}

def text_to_audio(user_input):
    """ Encode Unicode text to MFSK audio with Reed-Solomon error correction. """
    # Step 1: Convert text to UTF-8 hex
    byte_hex = user_input.encode('utf-8')
    string_hex = byte_hex.hex().upper()
    print(f'reedsolo Ï†Ñ: {string_hex}')

    audio = []
    encoded_data_list = []

    # Step 2: Add start signal
    for i in range(int(UNIT * SAMPLERATE * 2)):
        audio.append(SHORTMAX * math.sin(2 * math.pi * rules['START'] * i / SAMPLERATE))

    # Step 3: Reed-Solomon Encoding with Padding
    client_rsc = reedsolo.RSCodec(RSC_LEN, nsize=16)

    for k in range(0, len(byte_hex), DATA_LEN):
        data = byte_hex[k:k+DATA_LEN]

        # If block is smaller than DATA_LEN, add padding
        if len(data) < DATA_LEN:
            data = data.ljust(DATA_LEN, PADDING_BYTE)  

        # üîπ Ensure Reed-Solomon encoding applies to all blocks (even padded ones)
        encoded_data = client_rsc.encode(data).hex().upper()
        encoded_data_list.append(encoded_data)
        print(f'encoded_data: {encoded_data}')

        # Convert encoded hex to audio signal
        for s in encoded_data:
            if s in rules:
                freq = rules[s]
                for i in range(int(UNIT * SAMPLERATE)):
                    audio.append(SHORTMAX * math.sin(2 * math.pi * freq * i / SAMPLERATE))

    # Step 4: Add end signal
    for i in range(int(UNIT * SAMPLERATE * 2)):
        audio.append(SHORTMAX * math.sin(2 * math.pi * rules['END'] * i / SAMPLERATE))

    # üîπ Ï†ÑÏ≤¥ `encoded_data`Î•º ÌïòÎÇòÏùò Î¨∏ÏûêÏó¥Î°ú Ìï©Ï≥êÏÑú ÏµúÏ¢Ö Ï∂úÎ†•
    full_encoded_data = ''.join(encoded_data_list)
    print(f'Ï†ÑÏ≤¥ encoded_data: {full_encoded_data}') 

    return audio

def audio_to_file(audio_data, filename, samplerate=48000):
    # numpy Î∞∞Ïó¥Î°ú Î≥ÄÌôò ÌõÑ 32ÎπÑÌä∏ Ï†ïÏàòÌôî
    audio_data = np.array(audio_data, dtype=np.int32)
    
    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(1)  # Î™®ÎÖ∏ Ï±ÑÎÑê
        wf.setsampwidth(4)  # 32ÎπÑÌä∏ (4Î∞îÏù¥Ìä∏)
        wf.setframerate(samplerate)  # ÏÉòÌîåÎßÅ Î†àÏù¥Ìä∏ ÏÑ§Ï†ï
        wf.writeframes(audio_data.tobytes())  # NumPy Îç∞Ïù¥ÌÑ∞Î•º Î∞îÏù¥Ìä∏Î°ú Î≥ÄÌôò ÌõÑ Ï†ÄÏû•

# def file_to_audio(filename='200802013.wav'):
#     """ MFSK WAV ÌååÏùºÏóêÏÑú START/END Ïã†Ìò∏Î•º Í∞êÏßÄÌïòÍ≥† Îç∞Ïù¥ÌÑ∞Î•º Î≥µÏõê """
#     client_rsc = reedsolo.RSCodec(RSC_LEN)  # Reed-Solomon Î≥µÏõêÍ∏∞
#     received_hex = ""  # HEX Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
#     final_decoded_bytes = b""  # ÏµúÏ¢Ö UTF-8 Î≥µÏõê Î∞îÏù¥Ìä∏ Îç∞Ïù¥ÌÑ∞

#     with wave.open(filename, 'rb') as w:
#         sample_width = w.getsampwidth()  # ÏÉòÌîå ÌÅ¨Í∏∞ ÌôïÏù∏
#         bit_depth = sample_width * 8  # Î∞îÏù¥Ìä∏ ‚Üí ÎπÑÌä∏ Î≥ÄÌôò

#         print(f"üîç Detected Sample Width: {sample_width} bytes ({bit_depth}-bit WAV file)")
#         framerate = w.getframerate()
#         frames = w.getnframes()

#         # START/END Í∞êÏßÄÏö© Î≥ÄÏàò
#         start_detected = 0  
#         end_detected = 0  
#         recording = False  # Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïó¨Î∂Ä

#         for i in range(0, frames, chunk_size):
#             frame = w.readframes(chunk_size)
#             if len(frame) < chunk_size:  
#                 break  # ÌååÏùº ÎÅù ÎèÑÎã¨

#             # 64ÎπÑÌä∏ PCM Îç∞Ïù¥ÌÑ∞Î•º 16ÎπÑÌä∏ Ï†ïÏàò Î∞∞Ïó¥Î°ú Î≥ÄÌôò
#             audio = np.frombuffer(frame, dtype=np.int16)

#             # FFT Î≥ÄÌôò ÏàòÌñâ
#             freq = scipy.fftpack.fftfreq(len(audio), d=1/SAMPLERATE)
#             fourier = scipy.fftpack.fft(audio)
#             top_freq = freq[np.argmax(abs(fourier))]  # Í∞ÄÏû• Í∞ïÌïú Ï£ºÌååÏàò

#             # Í∞êÏßÄÎêú Ï£ºÌååÏàòÎ•º MFSK Ï£ºÌååÏàòÎ°ú Îß§Ìïë
#             detected_char = next((k for k, v in rules.items() if v - padding <= top_freq <= v + padding), '')

#             # START Ïã†Ìò∏ Í∞êÏßÄ (2Ïú†Îãõ Ïó∞ÏÜç)
#             if detected_char == "START":
#                 start_detected += 1
#                 if start_detected == 2:
#                     print("\nüîπ START Ïã†Ìò∏ Í∞êÏßÄÎê® - Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë")
#                     recording = True
#                     received_hex = ""  # Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
#                     continue
#             else:
#                 start_detected = 0  # Ï§ëÍ∞ÑÏóê ÎÅäÍ∏∞Î©¥ Ï¥àÍ∏∞Ìôî

#             # END Ïã†Ìò∏ Í∞êÏßÄ (2Ïú†Îãõ Ïó∞ÏÜç)
#             if detected_char == "END":
#                 end_detected += 1
#                 if end_detected == 2:
#                     print("\n‚úÖ END Ïã†Ìò∏ Í∞êÏßÄÎê® - Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï¢ÖÎ£å")
#                     recording = False
#                     break
#             else:
#                 end_detected = 0  # Ï§ëÍ∞ÑÏóê ÎÅäÍ∏∞Î©¥ Ï¥àÍ∏∞Ìôî

#             # Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï§ëÏù¥ÎùºÎ©¥ HEX Í∞í Ï†ÄÏû•
#             if recording and detected_char and detected_char not in ["START", "END"]:
#                 received_hex += detected_char
#                 print(detected_char, end='', flush=True)  # Ïã§ÏãúÍ∞Ñ Ï∂úÎ†•

#     print(f"\nüîç ÏàòÏßëÎêú HEX Îç∞Ïù¥ÌÑ∞: {received_hex}")

#     # ‚úÖ Reed-Solomon ÎîîÏΩîÎî©
#     for i in range(0, len(received_hex), BLOCK_SIZE * 2):
#         block_hex = received_hex[i:i + (BLOCK_SIZE * 2)]
#         block_bytes = bytes.fromhex(block_hex)

#         try:
#             decoded_block = client_rsc.decode(block_bytes)  # Reed-Solomon Î≥µÏõê

#             # ÌäúÌîå Î∞òÌôò Ïãú Ï≤´ Î≤àÏß∏ ÏöîÏÜå ÏÇ¨Ïö©
#             original_data = decoded_block if not isinstance(decoded_block, tuple) else decoded_block[0]

#             # ÎßàÏßÄÎßâ RSC_LEN(4Î∞îÏù¥Ìä∏) Ï†úÍ±∞
#             original_data = original_data[:-RSC_LEN]
#             final_decoded_bytes += original_data
#         except reedsolo.ReedSolomonError:
#             print(f"‚ùå Reed-Solomon Î≥µÏõê Ïã§Ìå®: {block_hex}")
#             continue

#     # ‚úÖ UTF-8 Î≥ÄÌôò
#     try:
#         decoded_text = final_decoded_bytes.decode("utf-8")
#         print(f"\n‚úÖ ÏµúÏ¢Ö Î≥µÏõêÎêú ÌÖçÏä§Ìä∏: {decoded_text}")
#         return decoded_text
#     except UnicodeDecodeError:
#         print("‚ùå UTF-8 ÎîîÏΩîÎî© Ïã§Ìå®: Îç∞Ïù¥ÌÑ∞ ÏÜêÏÉÅ Í∞ÄÎä•")
#         return None

def file_to_audio(filename='200802013.wav'):
    """ 32ÎπÑÌä∏ PCM WAV ÌååÏùºÏóêÏÑú 8Î∞îÏù¥Ìä∏(64ÎπÑÌä∏) Îã®ÏúÑÎ°ú Îç∞Ïù¥ÌÑ∞Î•º ÏùΩÍ≥† MFSK Î≥µÏõê """
    client_rsc = reedsolo.RSCodec(RSC_LEN)  # Reed-Solomon Î≥µÏõêÍ∏∞
    received_hex = ""  # HEX Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    final_decoded_bytes = b""  # ÏµúÏ¢Ö UTF-8 Î≥µÏõê Î∞îÏù¥Ìä∏ Îç∞Ïù¥ÌÑ∞

    with wave.open(filename, 'rb') as w:
        sample_width = w.getsampwidth()  # ÏÉòÌîå ÌÅ¨Í∏∞ ÌôïÏù∏
        bit_depth = sample_width * 8  # Î∞îÏù¥Ìä∏ ‚Üí ÎπÑÌä∏ Î≥ÄÌôò

        print(f"üîç Detected Sample Width: {sample_width} bytes ({bit_depth}-bit WAV file)")

        framerate = w.getframerate()
        frames = w.getnframes()

        start_detected = 0  
        end_detected = 0  
        recording = False  

        for i in range(0, frames, chunk_size):
            frame = w.readframes(chunk_size)  # ‚úÖ 8Î∞îÏù¥Ìä∏(2Í∞úÏùò 32ÎπÑÌä∏ ÏÉòÌîå)Ïî© ÏùΩÍ∏∞
            if len(frame) < chunk_size * 4:  
                break  # ÌååÏùº ÎÅù ÎèÑÎã¨

            # ‚úÖ 32ÎπÑÌä∏(4Î∞îÏù¥Ìä∏) ÏÉòÌîå 2Í∞úÎ•º Ìï©Ï≥êÏÑú 64ÎπÑÌä∏Î°ú Ìï¥ÏÑù
            audio = np.frombuffer(frame, dtype=np.int16)


            print(f"üéµ Raw Audio Data: {audio[:10]}")

            # FFT ÏàòÌñâ
            freq = scipy.fftpack.fftfreq(len(audio), d=1/SAMPLERATE)
            fourier = scipy.fftpack.fft(audio)
            top_freq = freq[np.argmax(abs(fourier))]  # Í∞ÄÏû• Í∞ïÌïú Ï£ºÌååÏàò

            # Í∞êÏßÄÎêú Ï£ºÌååÏàòÎ•º MFSK Ï£ºÌååÏàòÎ°ú Îß§Ìïë
            detected_char = next((k for k, v in rules.items() if v - padding <= top_freq <= v + padding), '')

            # ‚úÖ Ïã§ÏãúÍ∞Ñ Ï∂úÎ†•
            print(f"üì° [{i // chunk_size}] Detected Frequency: {top_freq:.2f} Hz ‚Üí {detected_char}")

            # START Ïã†Ìò∏ Í∞êÏßÄ (2Ïú†Îãõ Ïó∞ÏÜç)
            if detected_char == "START":
                start_detected += 1
                if start_detected == 2:
                    print("\nüîπ START Ïã†Ìò∏ Í∞êÏßÄÎê® - Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë")
                    recording = True
                    received_hex = ""  # Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
                    continue
            else:
                start_detected = 0  # Ï§ëÍ∞ÑÏóê ÎÅäÍ∏∞Î©¥ Ï¥àÍ∏∞Ìôî

            # END Ïã†Ìò∏ Í∞êÏßÄ (2Ïú†Îãõ Ïó∞ÏÜç)
            if detected_char == "END":
                end_detected += 1
                if end_detected == 2:
                    print("\n‚úÖ END Ïã†Ìò∏ Í∞êÏßÄÎê® - Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï¢ÖÎ£å")
                    recording = False
                    break
            else:
                end_detected = 0  # Ï§ëÍ∞ÑÏóê ÎÅäÍ∏∞Î©¥ Ï¥àÍ∏∞Ìôî

            # Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï§ëÏù¥ÎùºÎ©¥ HEX Í∞í Ï†ÄÏû•
            if recording and detected_char and detected_char not in ["START", "END"]:
                received_hex += detected_char
                print(detected_char, end='', flush=True)  # Ïã§ÏãúÍ∞Ñ Ï∂úÎ†•

    print(f"\nüîç ÏàòÏßëÎêú HEX Îç∞Ïù¥ÌÑ∞: {received_hex}")

    # ‚úÖ Reed-Solomon ÎîîÏΩîÎî©
    for i in range(0, len(received_hex), BLOCK_SIZE * 2):
        block_hex = received_hex[i:i + (BLOCK_SIZE * 2)]
        block_bytes = bytes.fromhex(block_hex)

        try:
            decoded_block = client_rsc.decode(block_bytes)  # Reed-Solomon Î≥µÏõê

            # ÌäúÌîå Î∞òÌôò Ïãú Ï≤´ Î≤àÏß∏ ÏöîÏÜå ÏÇ¨Ïö©
            original_data = decoded_block if not isinstance(decoded_block, tuple) else decoded_block[0]

            # ÎßàÏßÄÎßâ RSC_LEN(4Î∞îÏù¥Ìä∏) Ï†úÍ±∞
            original_data = original_data[:-RSC_LEN]
            final_decoded_bytes += original_data
        except reedsolo.ReedSolomonError:
            print(f"‚ùå Reed-Solomon Î≥µÏõê Ïã§Ìå®: {block_hex}")
            continue

    # ‚úÖ UTF-8 Î≥ÄÌôò
    try:
        decoded_text = final_decoded_bytes.decode("utf-8")
        print(f"\n‚úÖ ÏµúÏ¢Ö Î≥µÏõêÎêú ÌÖçÏä§Ìä∏: {decoded_text}")
        return decoded_text
    except UnicodeDecodeError:
        print("‚ùå UTF-8 ÎîîÏΩîÎî© Ïã§Ìå®: Îç∞Ïù¥ÌÑ∞ ÏÜêÏÉÅ Í∞ÄÎä•")
        return None


def hex_to_text(hex_string):
    try:
        return bytes.fromhex(hex_string).decode('utf-8')
    except UnicodeDecodeError:
        print("‚ùå Ïò§Î•ò: HEX Î≥ÄÌôò Ï§ë UTF-8 ÎîîÏΩîÎî© ÏóêÎü¨ Î∞úÏÉù")
        return None
    
def text_to_hex(text):
    hex_chars = []
    for char in text:
        hex_val = char.encode('utf-8').hex().upper()  # UTF-8 HEX Î≥ÄÌôò
        formatted_hex = ''.join([hex_val[i:i+2] for i in range(0, len(hex_val), 2)])  # HEX Îç∞Ïù¥ÌÑ∞ Î∂ôÏù¥Í∏∞
        hex_chars.append(formatted_hex)

    return ''.join(hex_chars)  # üîπ Í≥µÎ∞± ÏóÜÏù¥ HEX Î¨∏ÏûêÏó¥ÏùÑ Î∞îÎ°ú Î∞òÌôò



def decode_mfsk_from_mic():
    """ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÎßàÏù¥ÌÅ¨ÏóêÏÑú MFSK Ïã†Ìò∏Î•º ÏàòÏã†ÌïòÍ≥† ÎîîÏΩîÎî©ÌïòÎäî Ìï®Ïàò """
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt32, channels=1, rate=samplerate, input=True, frames_per_buffer=chunk_size)
    
    print("üé§ Listening for MFSK signals... (Press Ctrl+C to stop)")
    
    text = ""
    last_char = None  # Ï§ëÎ≥µ Î¨∏Ïûê Î∞©ÏßÄ
    start_detected = False  # START Ï§ëÎ≥µ Í∞êÏßÄ Î∞©ÏßÄ


    try:
        while True:
            data = stream.read(chunk_size)  # 1 unit(0.1Ï¥à) ÌÅ¨Í∏∞Î°ú ÎßàÏù¥ÌÅ¨ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞
            audio = np.frombuffer(data, dtype=np.int32)  # Î∞îÏù¥Ìä∏ Îç∞Ïù¥ÌÑ∞Î•º 32ÎπÑÌä∏ Ï†ïÏàò Î∞∞Ïó¥Î°ú Î≥ÄÌôò

            # ‚úÖ Ìì®Î¶¨Ïóê Î≥ÄÌôò (FFT) ÏàòÌñâ
            freq = scipy.fftpack.fftfreq(len(audio), d=1/samplerate)
            fourier = scipy.fftpack.fft(audio)
            top_freq = freq[np.argmax(abs(fourier))]  # Í∞ÄÏû• Í∞ïÌïú Ï£ºÌååÏàò Ï∞æÍ∏∞
            
            print(f"üîç Detected Frequency: {top_freq:.2f} Hz")  # Í∞êÏßÄÎêú Ï£ºÌååÏàò Ï∂úÎ†•

            # ‚úÖ Í∞êÏßÄÎêú Ï£ºÌååÏàòÎ•º MFSK Ï£ºÌååÏàòÏôÄ Îß§Ìïë
            data_char = next((k for k, v in rules.items() if v - padding <= top_freq <= v + padding), '')

            # ‚úÖ Ïã§ÏãúÍ∞Ñ ÎîîÏΩîÎî© Î°úÏßÅ
            if data_char == "START":
                print("\nüîπ Start Signal Detected")
                text = ""  # ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄ ÏãúÏûë
            elif data_char == "END":
                print(text)
                print("\n‚úÖ Decoded Message:", bytes.fromhex(text).decode("utf-8"))
                break  # Î©îÏãúÏßÄ ÏàòÏã† ÏôÑÎ£å ÌõÑ Ï¢ÖÎ£å
            elif data_char:
                text += data_char  # HEX Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
                print(data_char, end='', flush=True)

    except KeyboardInterrupt:
        print("\nüõë Stopped Listening.")

    stream.stop_stream()
    stream.close()
    p.terminate()



def send_data():
    user_input = input('Input the text (Unicode): ')
    print(f'User input: {user_input}')
    audio = text_to_audio(user_input)

    # üîπ ÏÉùÏÑ±Îêú Morse Ïò§ÎîîÏò§ Îç∞Ïù¥ÌÑ∞Î•º ÌååÏùºÎ°ú Ï†ÄÏû•
    audio_to_file(audio, "mfsk.wav")
    print("Morse code audio saved as 'mfsk.wav'")



def receive_data():
    file_to_audio()

# def receive_test():
#     decode_mfsk_from_audio()



def main():
    while True:
        print('2024 Spring Data Communication at CNU')
        print('[1] Send Unicode over sound (play)')
        print('[2] Receive Unicode over sound (record)')
        print('[q] Exit')
        select = input('Select menu: ').strip().upper()
        if select == '1':
            send_data()
        elif select == '2':
            receive_data()
        elif select == 'Q':
            print('Terminating...')
            break

if __name__ == '__main__':
    main()
